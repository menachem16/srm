import React from 'react';

function AdminPanel({ user }) {   const [stats, setStats] = React.useState({});   const [users, setUsers] = React.useState([]);   const [channels, setChannels] = React.useState([]);   const [activeTab, setActiveTab] = React.useState('dashboard');   const [loading, setLoading] = React.useState(true);    React.useEffect(() => {     loadDashboardData();   }, []);    const loadDashboardData = async () => {     try {       setLoading(true);       const [usersData, ratingsData] = await Promise.all([         window.trickleListObjects('user', 20, true),         window.trickleListObjects('channel_ratings', 50, true)       ]);              setUsers(usersData.items || []);              const totalRatings = ratingsData.items?.length || 0;       const avgRating = ratingsData.items?.length > 0 ?          (ratingsData.items.reduce((sum, r) => sum + r.objectData.rating, 0) / ratingsData.items.length).toFixed(1) : 0;              setStats({         totalUsers: usersData.items?.length || 0,         totalRatings,         avgRating,         activeUsers: usersData.items?.filter(u =>            new Date(u.objectData.lastLogin || u.createdAt) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)         ).length || 0       });     } catch (error) {       console.error('Error loading dashboard data:', error);     } finally {       setLoading(false);     }   };    const toggleUserStatus = async (userId, currentStatus) => {     try {       const userData = users.find(u => u.objectId === userId);       await window.trickleUpdateObject('user', userId, {         ...userData.objectData,         isActive: !currentStatus       });       loadDashboardData();     } catch (error) {       console.error('Error updating user status:', error);     }   };    try {     if (loading) {       return (         <div className="max-w-7xl mx-auto px-6 pt-20">           <div className="text-center py-12">             <div className="icon-loader text-4xl text-gray-400 animate-spin mb-4"></div>             <p className="text-gray-400">טוען נתוני ניהול...</p>           </div>         </div>       );     }      return (       <div className="max-w-7xl mx-auto px-6 pt-20" data-name="admin-panel" data-file="components/AdminPanel.js">         <h1 className="text-3xl font-bold mb-6">פאנל ניהול</h1>                  <div className="flex space-x-4 mb-6">           <button              className={`px-4 py-2 rounded ${activeTab === 'dashboard' ? 'bg-red-600' : 'bg-gray-700'}`}             onClick={() => setActiveTab('dashboard')}           >             דשבורד           </button>           <button              className={`px-4 py-2 rounded ${activeTab === 'users' ? 'bg-red-600' : 'bg-gray-700'}`}             onClick={() => setActiveTab('users')}           >             משתמשים           </button>         </div>          {activeTab === 'dashboard' && (           <div className="grid md:grid-cols-4 gap-6 mb-8">             <div className="bg-gray-800 rounded-lg p-6">               <div className="flex items-center">                 <div className="icon-users text-blue-500 text-2xl ml-3"></div>                 <div>                   <div className="text-2xl font-bold">{stats.totalUsers}</div>                   <div className="text-gray-400">סך המשתמשים</div>                 </div>               </div>             </div>                          <div className="bg-gray-800 rounded-lg p-6">               <div className="flex items-center">                 <div className="icon-activity text-green-500 text-2xl ml-3"></div>                 <div>                   <div className="text-2xl font-bold">{stats.activeUsers}</div>                   <div className="text-gray-400">פעילים השבוע</div>                 </div>               </div>             </div>                          <div className="bg-gray-800 rounded-lg p-6">               <div className="flex items-center">                 <div className="icon-star text-yellow-500 text-2xl ml-3"></div>                 <div>                   <div className="text-2xl font-bold">{stats.totalRatings}</div>                   <div className="text-gray-400">דירוגים</div>                 </div>               </div>             </div>                          <div className="bg-gray-800 rounded-lg p-6">               <div className="flex items-center">                 <div className="icon-trending-up text-red-500 text-2xl ml-3"></div>                 <div>                   <div className="text-2xl font-bold">{stats.avgRating}</div>                   <div className="text-gray-400">דירוג ממוצע</div>                 </div>               </div>             </div>           </div>         )}          {activeTab === 'users' && (           <div className="bg-gray-800 rounded-lg overflow-hidden">             <table className="w-full">               <thead className="bg-gray-700">                 <tr>                   <th className="px-4 py-3 text-right">שם</th>                   <th className="px-4 py-3 text-right">אימייל</th>                   <th className="px-4 py-3 text-right">תאריך הצטרפות</th>                   <th className="px-4 py-3 text-right">סטטוס</th>                   <th className="px-4 py-3 text-right">פעולות</th>                 </tr>               </thead>               <tbody>                 {users.map((user) => (                   <tr key={user.objectId} className="border-b border-gray-700">                     <td className="px-4 py-3">{user.objectData.name}</td>                     <td className="px-4 py-3">{user.objectData.email}</td>                     <td className="px-4 py-3">                       {new Date(user.createdAt).toLocaleDateString('he-IL')}                     </td>                     <td className="px-4 py-3">                       <span className={`px-2 py-1 rounded text-xs ${                         user.objectData.isActive !== false ? 'bg-green-600' : 'bg-red-600'                       }`}>                         {user.objectData.isActive !== false ? 'פעיל' : 'חסום'}                       </span>                     </td>                     <td className="px-4 py-3">                       <button                          className="text-blue-400 hover:text-blue-300 text-sm"                         onClick={() => toggleUserStatus(user.objectId, user.objectData.isActive !== false)}                       >                         {user.objectData.isActive !== false ? 'חסום' : 'הפעל'}                       </button>                     </td>                   </tr>                 ))}               </tbody>             </table>           </div>         )}       </div>     );   } catch (error) {     console.error('AdminPanel component error:', error);     return null;   } }

export default AdminPanel;
