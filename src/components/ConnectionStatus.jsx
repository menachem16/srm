import React from 'react';

function ConnectionStatus({ isVisible, onClose, currentMethod, progress }) {   const [methodStates, setMethodStates] = React.useState([     { name: 'Xtream API', status: 'pending', description: 'חיבור ישיר לשרת IPTV' },     { name: 'M3U Playlist', status: 'pending', description: 'טעינת רשימת ערוצים' },     { name: 'AllOrigins Proxy', status: 'pending', description: 'שירות עקיפה 1' },     { name: 'CORS Anywhere', status: 'pending', description: 'שירות עקיפה 2' },     { name: 'ThingProxy', status: 'pending', description: 'שירות עקיפה 3' },     { name: 'Direct Connection', status: 'pending', description: 'חיבור ישיר' }   ]);    React.useEffect(() => {     if (currentMethod && isVisible) {       updateMethodStatus(currentMethod, 'active');     }   }, [currentMethod, isVisible]);    const updateMethodStatus = (methodName, status) => {     setMethodStates(prev => prev.map(method => {       if (method.name.includes(methodName) || methodName.includes(method.name)) {         return { ...method, status };       } else if (status === 'active' && method.status === 'active') {         return { ...method, status: 'success' };       }       return method;     }));   };    const getStatusIcon = (status) => {     switch (status) {       case 'active': return 'icon-loader animate-spin text-blue-500';       case 'success': return 'icon-check text-green-500';       case 'failed': return 'icon-x text-red-500';       default: return 'icon-clock text-gray-500';     }   };    const getStatusText = (status) => {     switch (status) {       case 'active': return 'מתחבר...';       case 'success': return 'הצליח';       case 'failed': return 'נכשל';       default: return 'ממתין';     }   };    try {     if (!isVisible) return null;      return (       <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" data-name="connection-status" data-file="components/ConnectionStatus.js">         <div className="bg-gray-900 rounded-lg p-6 max-w-md w-full mx-4">           <div className="flex justify-between items-center mb-6">             <h2 className="text-xl font-bold">מתחבר לשרת IPTV</h2>             <button onClick={onClose}>               <div className="icon-x text-xl"></div>             </button>           </div>                      <div className="mb-4">             <div className="bg-gray-800 rounded-full h-2 mb-4">               <div                  className="bg-blue-600 h-2 rounded-full transition-all duration-300"                 style={{ width: `${progress || 0}%` }}               ></div>             </div>             <p className="text-sm text-gray-400 text-center">               המערכת מנסה מספר שיטות חיבור...             </p>           </div>            <div className="space-y-3">             {methodStates.map((method, index) => (               <div key={index} className="flex items-center justify-between p-3 bg-gray-800 rounded">                 <div className="flex items-center">                   <div className={`${getStatusIcon(method.status)} text-lg ml-3`}></div>                   <div>                     <div className="font-semibold">{method.name}</div>                     <div className="text-xs text-gray-400">{method.description}</div>                   </div>                 </div>                 <div className="text-sm text-gray-300">                   {getStatusText(method.status)}                 </div>               </div>             ))}           </div>            <div className="mt-6 text-center">             <p className="text-xs text-gray-500">               זמן המתנה מקסימלי: 60 שניות             </p>           </div>         </div>       </div>     );   } catch (error) {     console.error('ConnectionStatus component error:', error);     return null;   } }

export default ConnectionStatus;
