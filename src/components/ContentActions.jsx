import React from 'react';

import { trickleListObjects, trickleCreateObject, trickleUpdateObject, trickleDeleteObject } from '../utils/database';  function ContentActions({ content, user, onRatingClick }) {   const [isFavorite, setIsFavorite] = React.useState(false);   const [isInWatchlist, setIsInWatchlist] = React.useState(false);    React.useEffect(() => {     if (user && content) {       checkUserLists();     }   }, [user, content]);    const checkUserLists = async () => {     try {       const userFavorites = await trickleListObjects(`favorites:${user.objectId}`, 100, true);       const favItem = userFavorites.items.find(item =>          item.objectData.contentId === content.objectId && item.objectData.type === 'favorites'       );       const watchItem = userFavorites.items.find(item =>          item.objectData.contentId === content.objectId && item.objectData.type === 'watchlist'       );       setIsFavorite(!!favItem);       setIsInWatchlist(!!watchItem);     } catch (error) {       console.error('Error checking user lists:', error);     }   };    const toggleFavorite = async () => {     try {       if (isFavorite) {         const userFavorites = await trickleListObjects(`favorites:${user.objectId}`, 100, true);         const favItem = userFavorites.items.find(item =>            item.objectData.contentId === content.objectId && item.objectData.type === 'favorites'         );         if (favItem) {           await trickleDeleteObject(`favorites:${user.objectId}`, favItem.objectId);         }       } else {         await trickleCreateObject(`favorites:${user.objectId}`, {           userId: user.objectId,           contentId: content.objectId,           type: 'favorites'         });       }       setIsFavorite(!isFavorite);     } catch (error) {       console.error('Error toggling favorite:', error);     }   };    const toggleWatchlist = async () => {     try {       if (isInWatchlist) {         const userFavorites = await trickleListObjects(`favorites:${user.objectId}`, 100, true);         const watchItem = userFavorites.items.find(item =>            item.objectData.contentId === content.objectId && item.objectData.type === 'watchlist'         );         if (watchItem) {           await trickleDeleteObject(`favorites:${user.objectId}`, watchItem.objectId);         }       } else {         await trickleCreateObject(`favorites:${user.objectId}`, {           userId: user.objectId,           contentId: content.objectId,           type: 'watchlist'         });       }       setIsInWatchlist(!isInWatchlist);     } catch (error) {       console.error('Error toggling watchlist:', error);     }   };    try {     if (!user) return null;      return (       <div className="flex space-x-2" data-name="content-actions" data-file="components/ContentActions.js">         <button           onClick={toggleFavorite}           className={`p-2 rounded-full ${isFavorite ? 'bg-red-600' : 'bg-gray-700'} hover:bg-opacity-80`}           title={isFavorite ? 'הסר מהמועדפים' : 'הוסף למועדפים'}         >           <div className="icon-heart text-white text-sm"></div>         </button>                  <button           onClick={toggleWatchlist}           className={`p-2 rounded-full ${isInWatchlist ? 'bg-blue-600' : 'bg-gray-700'} hover:bg-opacity-80`}           title={isInWatchlist ? 'הסר מרשימת הצפייה' : 'הוסף לרשימת צפייה'}         >           <div className="icon-plus text-white text-sm"></div>         </button>                  <button           onClick={onRatingClick}           className="p-2 rounded-full bg-yellow-600 hover:bg-opacity-80"           title="דרג תוכן"         >           <div className="icon-star text-white text-sm"></div>         </button>       </div>     );   } catch (error) {     console.error('ContentActions component error:', error);     return null;   } }

export default ContentActions;
