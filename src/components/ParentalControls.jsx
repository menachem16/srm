import React from 'react';
import { trickleListObjects, trickleCreateObject, trickleUpdateObject } from '../utils/database';

function ParentalControls({ user }) {   const [settings, setSettings] = React.useState({     enabled: false,     blockedCategories: [],     timeRestrictions: {       enabled: false,       startTime: '22:00',       endTime: '06:00'     },     ageRating: 'all',     pin: ''   });   const [showPinModal, setShowPinModal] = React.useState(false);   const [loading, setLoading] = React.useState(true);    const categories = ['ילדים', 'חדשות', 'ספורט', 'מוזיקה', 'דוקומנטרי', 'בידור', 'סרטים'];   const ageRatings = [     { value: 'all', label: 'כל הגילאים' },     { value: 'kids', label: 'ילדים (עד 12)' },     { value: 'teen', label: 'נוער (13-17)' },     { value: 'adult', label: 'מבוגרים (18+)' }   ];    React.useEffect(() => {     if (user) {       loadSettings();     }   }, [user]);    const loadSettings = async () => {     try {       setLoading(true);       const settingsData = await trickleListObjects(`parental_settings:${user.objectId}`, 1, true);       if (settingsData.items.length > 0) {         setSettings(settingsData.items[0].objectData);       }     } catch (error) {       console.error('Error loading parental settings:', error);     } finally {       setLoading(false);     }   };    const saveSettings = async () => {     try {       const existingSettings = await trickleListObjects(`parental_settings:${user.objectId}`, 1, true);              if (existingSettings.items.length > 0) {         await trickleUpdateObject(`parental_settings:${user.objectId}`, existingSettings.items[0].objectId, settings);       } else {         await trickleCreateObject(`parental_settings:${user.objectId}`, {           userId: user.objectId,           ...settings         });       }              alert('הגדרות נשמרו בהצלחה');     } catch (error) {       console.error('Error saving parental settings:', error);       alert('שגיאה בשמירת הגדרות');     }   };    const handleCategoryToggle = (category) => {     setSettings(prev => ({       ...prev,       blockedCategories: prev.blockedCategories.includes(category)         ? prev.blockedCategories.filter(c => c !== category)         : [...prev.blockedCategories, category]     }));   };    try {     if (loading) {       return (         <div className="max-w-4xl mx-auto px-6 pt-20">           <div className="text-center py-12">             <div className="icon-loader text-4xl text-gray-400 animate-spin mb-4"></div>             <p className="text-gray-400">טוען הגדרות...</p>           </div>         </div>       );     }      return (       <div className="max-w-4xl mx-auto px-6 pt-20" data-name="parental-controls" data-file="components/ParentalControls.js">         <h1 className="text-3xl font-bold mb-6">בקרת הורים</h1>                  <div className="bg-gray-800 rounded-lg p-6 space-y-6">           <div className="flex items-center justify-between">             <div>               <h3 className="text-lg font-semibold">הפעל בקרת הורים</h3>               <p className="text-sm text-gray-400">הגבל גישה לתכנים בהתאם לגיל</p>             </div>             <button               className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${                 settings.enabled ? 'bg-red-600' : 'bg-gray-600'               }`}               onClick={() => setSettings(prev => ({ ...prev, enabled: !prev.enabled }))}             >               <span                 className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${                   settings.enabled ? 'translate-x-6' : 'translate-x-1'                 }`}               />             </button>           </div>            {settings.enabled && (             <>               <div>                 <h3 className="text-lg font-semibold mb-3">קטגוריות חסומות</h3>                 <div className="grid grid-cols-2 md:grid-cols-3 gap-3">                   {categories.map(category => (                     <label key={category} className="flex items-center">                       <input                         type="checkbox"                         checked={settings.blockedCategories.includes(category)}                         onChange={() => handleCategoryToggle(category)}                         className="mr-2"                       />                       <span>{category}</span>                     </label>                   ))}                 </div>               </div>                <div>                 <h3 className="text-lg font-semibold mb-3">הגבלת זמן</h3>                 <div className="flex items-center mb-3">                   <input                     type="checkbox"                     checked={settings.timeRestrictions.enabled}                     onChange={(e) => setSettings(prev => ({                       ...prev,                       timeRestrictions: { ...prev.timeRestrictions, enabled: e.target.checked }                     }))}                     className="mr-2"                   />                   <span>הפעל הגבלת זמן</span>                 </div>                                  {settings.timeRestrictions.enabled && (                   <div className="grid grid-cols-2 gap-4">                     <div>                       <label className="block text-sm font-medium mb-2">שעת התחלה</label>                       <input                         type="time"                         value={settings.timeRestrictions.startTime}                         onChange={(e) => setSettings(prev => ({                           ...prev,                           timeRestrictions: { ...prev.timeRestrictions, startTime: e.target.value }                         }))}                         className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded"                       />                     </div>                     <div>                       <label className="block text-sm font-medium mb-2">שעת סיום</label>                       <input                         type="time"                         value={settings.timeRestrictions.endTime}                         onChange={(e) => setSettings(prev => ({                           ...prev,                           timeRestrictions: { ...prev.timeRestrictions, endTime: e.target.value }                         }))}                         className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded"                       />                     </div>                   </div>                 )}               </div>                <div>                 <h3 className="text-lg font-semibold mb-3">דירוג גיל</h3>                 <select                   value={settings.ageRating}                   onChange={(e) => setSettings(prev => ({ ...prev, ageRating: e.target.value }))}                   className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded"                 >                   {ageRatings.map(rating => (                     <option key={rating.value} value={rating.value}>                       {rating.label}                     </option>                   ))}                 </select>               </div>             </>           )}            <div className="flex justify-end">             <button onClick={saveSettings} className="btn-primary">               שמור הגדרות             </button>           </div>         </div>       </div>     );   } catch (error) {     console.error('ParentalControls component error:', error);     return null;   } }

export default ParentalControls;
