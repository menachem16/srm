import React from 'react';
import { trickleListObjects, trickleCreateObject, trickleUpdateObject, trickleDeleteObject } from '../utils/database';

function PersonalLists({ user, content, onPlayContent }) {   const [lists, setLists] = React.useState([]);   const [showCreateModal, setShowCreateModal] = React.useState(false);   const [selectedList, setSelectedList] = React.useState(null);    React.useEffect(() => {     if (user) {       loadLists();     }   }, [user]);    const loadLists = async () => {     try {       const listsData = await trickleListObjects(`personal_lists:${user.objectId}`, 20, true);       setLists(listsData.items);     } catch (error) {       console.error('Error loading lists:', error);     }   };    const createList = async (name, description) => {     try {       await trickleCreateObject(`personal_lists:${user.objectId}`, {         userId: user.objectId,         name: name,         description: description,         contentIds: [],         isPublic: false,         createdAt: new Date().toISOString()       });       loadLists();     } catch (error) {       console.error('Error creating list:', error);     }   };    const addToList = async (listId, contentId) => {     try {       const list = lists.find(l => l.objectId === listId);       if (list && !list.objectData.contentIds.includes(contentId)) {         await trickleUpdateObject(`personal_lists:${user.objectId}`, listId, {           ...list.objectData,           contentIds: [...list.objectData.contentIds, contentId]         });         loadLists();       }     } catch (error) {       console.error('Error adding to list:', error);     }   };    const removeFromList = async (listId, contentId) => {     try {       const list = lists.find(l => l.objectId === listId);       if (list) {         await trickleUpdateObject(`personal_lists:${user.objectId}`, listId, {           ...list.objectData,           contentIds: list.objectData.contentIds.filter(id => id !== contentId)         });         loadLists();       }     } catch (error) {       console.error('Error removing from list:', error);     }   };    const getContentById = (contentId) => {     return content.find(item => item.objectId === contentId)?.objectData;   };    try {     return (       <div className="max-w-7xl mx-auto px-6" data-name="personal-lists" data-file="components/PersonalLists.js">         <div className="flex justify-between items-center mb-6">           <h1 className="text-3xl font-bold">הרשימות שלי</h1>           <button              className="btn-primary"             onClick={() => setShowCreateModal(true)}           >             <div className="icon-plus text-lg ml-2"></div>             רשימה חדשה           </button>         </div>          {lists.length === 0 ? (           <div className="text-center py-12">             <div className="icon-list text-6xl text-gray-600 mb-4"></div>             <h2 className="text-xl font-semibold mb-2">אין רשימות עדיין</h2>             <p className="text-gray-400">צור רשימות אישיות לארגון התכנים שלך</p>           </div>         ) : (           <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">             {lists.map(list => (               <div key={list.objectId} className="bg-gray-800 rounded-lg p-4">                 <h3 className="font-bold text-lg mb-2">{list.objectData.name}</h3>                 <p className="text-gray-400 text-sm mb-3">{list.objectData.description}</p>                 <div className="flex justify-between items-center">                   <span className="text-sm text-gray-500">                     {list.objectData.contentIds.length} תכנים                   </span>                   <button                      className="btn-secondary text-sm"                     onClick={() => setSelectedList(list)}                   >                     צפה                   </button>                 </div>               </div>             ))}           </div>         )}          {showCreateModal && (           <CreateListModal              onClose={() => setShowCreateModal(false)}             onCreate={createList}           />         )}          {selectedList && (           <ListDetailsModal              list={selectedList}             content={content}             onClose={() => setSelectedList(null)}             onRemove={removeFromList}             onPlayContent={onPlayContent}           />         )}       </div>     );   } catch (error) {     console.error('PersonalLists component error:', error);     return null;   } }  function CreateListModal({ onClose, onCreate }) {   const [name, setName] = React.useState('');   const [description, setDescription] = React.useState('');    const handleSubmit = (e) => {     e.preventDefault();     if (name.trim()) {       onCreate(name.trim(), description.trim());       onClose();     }   };    return (     <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">       <div className="bg-gray-900 rounded-lg p-6 max-w-md w-full mx-4">         <h2 className="text-xl font-bold mb-4">רשימה חדשה</h2>         <form onSubmit={handleSubmit}>           <div className="mb-4">             <label className="block text-sm font-medium mb-2">שם הרשימה</label>             <input               type="text"               required               value={name}               onChange={(e) => setName(e.target.value)}               className="w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded"               autoFocus             />           </div>           <div className="mb-6">             <label className="block text-sm font-medium mb-2">תיאור (אופציונלי)</label>             <textarea               rows="3"               value={description}               onChange={(e) => setDescription(e.target.value)}               className="w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded"             />           </div>           <div className="flex space-x-3">             <button type="submit" className="btn-primary flex-1">צור</button>             <button type="button" onClick={onClose} className="btn-secondary flex-1">ביטול</button>           </div>         </form>       </div>     </div>   ); }  function ListDetailsModal({ list, content, onClose, onRemove, onPlayContent }) {   const getContentById = (contentId) => {     return content.find(item => item.objectId === contentId)?.objectData;   };    return (     <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">       <div className="bg-gray-900 rounded-lg p-6 max-w-4xl w-full max-h-screen overflow-y-auto">         <div className="flex justify-between items-center mb-6">           <div>             <h2 className="text-2xl font-bold">{list.objectData.name}</h2>             <p className="text-gray-400">{list.objectData.description}</p>           </div>           <button onClick={onClose}>             <div className="icon-x text-xl"></div>           </button>         </div>                  <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">           {list.objectData.contentIds.map(contentId => {             const contentData = getContentById(contentId);             if (!contentData) return null;                          return (               <div key={contentId} className="relative group">                 <div                    className="content-card cursor-pointer"                   onClick={() => onPlayContent(contentData)}                 >                   <img                      src={contentData.thumbnail}                      alt={contentData.title}                     className="w-full h-32 object-cover"                   />                   <div className="p-2">                     <h3 className="font-semibold text-xs truncate">{contentData.title}</h3>                   </div>                 </div>                 <button                   className="absolute top-2 right-2 bg-red-600 rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"                   onClick={() => onRemove(list.objectId, contentId)}                 >                   <div className="icon-x text-sm text-white"></div>                 </button>               </div>             );           })}         </div>       </div>     </div>   ); }

export default PersonalLists;
