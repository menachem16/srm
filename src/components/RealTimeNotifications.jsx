import React from 'react';

function RealTimeNotifications({ user }) {   const [notifications, setNotifications] = React.useState([]);   const [showNotifications, setShowNotifications] = React.useState(false);   const [unreadCount, setUnreadCount] = React.useState(0);    React.useEffect(() => {     if (user) {       loadNotifications();       const interval = setInterval(loadNotifications, 30000);       return () => clearInterval(interval);     }   }, [user]);    const loadNotifications = async () => {     try {       await new Promise(resolve => setTimeout(resolve, 200));       const notifData = await trickleListObjects(`notifications:${user.objectId}`, 10, true);              if (notifData && notifData.items) {         setNotifications(notifData.items);         const unread = notifData.items.filter(n => !n.objectData.isRead).length;         setUnreadCount(unread);       }     } catch (error) {       console.error('Error loading notifications:', error);     }   };    const markAsRead = async (notificationId) => {     try {       const notification = notifications.find(n => n.objectId === notificationId);       if (notification) {         await trickleUpdateObject(`notifications:${user.objectId}`, notificationId, {           ...notification.objectData,           isRead: true         });         loadNotifications();       }     } catch (error) {       console.error('Error marking notification as read:', error);     }   };    try {     return (       <div className="relative" data-name="real-time-notifications" data-file="components/RealTimeNotifications.js">         <button           className="relative p-2 text-gray-300 hover:text-white"           onClick={() => setShowNotifications(!showNotifications)}         >           <div className="icon-bell text-xl"></div>           {unreadCount > 0 && (             <span className="absolute -top-1 -right-1 bg-red-600 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">               {unreadCount}             </span>           )}         </button>          {showNotifications && (           <div className="absolute left-0 mt-2 w-80 bg-gray-800 rounded-lg shadow-lg z-50 max-h-96 overflow-y-auto">             <div className="p-4 border-b border-gray-700">               <h3 className="font-semibold">התראות</h3>             </div>              <div className="max-h-64 overflow-y-auto">               {notifications.length === 0 ? (                 <div className="p-4 text-center text-gray-400">                   אין התראות חדשות                 </div>               ) : (                 notifications.map(notification => (                   <div                     key={notification.objectId}                     className={`p-3 border-b border-gray-700 cursor-pointer hover:bg-gray-700 ${                       !notification.objectData.isRead ? 'bg-blue-900 bg-opacity-30' : ''                     }`}                     onClick={() => markAsRead(notification.objectId)}                   >                     <h4 className="font-semibold text-sm">{notification.objectData.title}</h4>                     <p className="text-xs text-gray-300 mt-1">{notification.objectData.message}</p>                     <p className="text-xs text-gray-500 mt-1">                       {new Date(notification.createdAt).toLocaleString('he-IL')}                     </p>                   </div>                 ))               )}             </div>           </div>         )}       </div>     );   } catch (error) {     console.error('RealTimeNotifications component error:', error);     return null;   } }

export default RealTimeNotifications;
