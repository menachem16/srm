import React from 'react';

function SupportChat({ user }) {   const [messages, setMessages] = React.useState([]);   const [newMessage, setNewMessage] = React.useState('');   const [chatId, setChatId] = React.useState(null);    React.useEffect(() => {     if (user) {       initializeChat();     }   }, [user]);    const initializeChat = async () => {     const id = user ? `chat_${user.objectId}` : `guest_${Date.now()}`;     setChatId(id);     loadMessages(id);   };    const loadMessages = async (id) => {     try {       const messagesData = await trickleListObjects(`support_chat:${id}`, 50, false);       setMessages(messagesData.items);     } catch (error) {       console.error('Error loading messages:', error);     }   };    const sendMessage = async (e) => {     e.preventDefault();     if (!newMessage.trim()) return;      try {       await trickleCreateObject(`support_chat:${chatId}`, {         userId: user?.objectId || 'guest',         message: newMessage,         isFromUser: true,         chatId: chatId,         isRead: false       });        setNewMessage('');       loadMessages(chatId);        setTimeout(() => {         sendAutoReply();       }, 1000);     } catch (error) {       console.error('Error sending message:', error);     }   };    const sendAutoReply = async () => {     const replies = [       'תודה על פנייתך! נציג שירות יחזור אליך בהקדם.',       'קיבלנו את הודעתך ונטפל בה בהקדם האפשרי.',       'איך נוכל לעזור לך היום?'     ];          const randomReply = replies[Math.floor(Math.random() * replies.length)];      try {       await trickleCreateObject(`support_chat:${chatId}`, {         userId: 'support',         message: randomReply,         isFromUser: false,         chatId: chatId,         isRead: true       });              loadMessages(chatId);     } catch (error) {       console.error('Error sending auto reply:', error);     }   };    try {     return (       <div className="max-w-4xl mx-auto px-6" data-name="support-chat" data-file="components/SupportChat.js">         <h1 className="text-3xl font-bold mb-6">תמיכת לקוחות</h1>                  <div className="bg-gray-800 rounded-lg p-6">           <div className="h-96 overflow-y-auto mb-4 space-y-3">             {messages.length === 0 ? (               <div className="text-center text-gray-400 py-8">                 <div className="icon-message-circle text-4xl mb-2"></div>                 <p>התחל שיחה עם נציג התמיכה</p>               </div>             ) : (               messages.map((message) => (                 <div                    key={message.objectId}                   className={`flex ${message.objectData.isFromUser ? 'justify-end' : 'justify-start'}`}                 >                   <div                      className={`max-w-xs px-4 py-2 rounded-lg ${                       message.objectData.isFromUser                          ? 'bg-red-600 text-white'                          : 'bg-gray-700 text-gray-200'                     }`}                   >                     <p>{message.objectData.message}</p>                     <div className="text-xs opacity-70 mt-1">                       {new Date(message.createdAt).toLocaleTimeString('he-IL')}                     </div>                   </div>                 </div>               ))             )}           </div>                      <form onSubmit={sendMessage} className="flex space-x-3">             <input               type="text"               value={newMessage}               onChange={(e) => setNewMessage(e.target.value)}               placeholder="כתוב הודעה..."               className="flex-1 px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-red-600"             />             <button type="submit" className="btn-primary">               <div className="icon-send text-lg"></div>             </button>           </form>         </div>       </div>     );   } catch (error) {     console.error('SupportChat component error:', error);     return null;   } }

export default SupportChat;
