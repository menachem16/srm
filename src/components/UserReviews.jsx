import React from 'react';

function UserReviews({ contentId, user }) {   const [reviews, setReviews] = React.useState([]);   const [userReview, setUserReview] = React.useState(null);   const [showReviewForm, setShowReviewForm] = React.useState(false);    React.useEffect(() => {     if (contentId) {       loadReviews();       if (user) {         loadUserReview();       }     }   }, [contentId, user]);    const loadReviews = async () => {     try {       const reviewsData = await trickleListObjects(`reviews:${contentId}`, 50, true);       setReviews(reviewsData.items);     } catch (error) {       console.error('Error loading reviews:', error);     }   };    const loadUserReview = async () => {     try {       const userReviews = await trickleListObjects(`user_reviews:${user.objectId}`, 100, true);       const existingReview = userReviews.items.find(r => r.objectData.contentId === contentId);       setUserReview(existingReview);     } catch (error) {       console.error('Error loading user review:', error);     }   };    const submitReview = async (rating, reviewText) => {     try {       if (userReview) {         await trickleUpdateObject(`user_reviews:${user.objectId}`, userReview.objectId, {           ...userReview.objectData,           rating: rating,           review: reviewText,           updatedAt: new Date().toISOString()         });       } else {         await trickleCreateObject(`user_reviews:${user.objectId}`, {           userId: user.objectId,           userName: user.name,           contentId: contentId,           rating: rating,           review: reviewText,           likes: 0,           createdAt: new Date().toISOString()         });       }              await trickleCreateObject(`reviews:${contentId}`, {         userId: user.objectId,         userName: user.name,         contentId: contentId,         rating: rating,         review: reviewText,         likes: 0,         createdAt: new Date().toISOString()       });              loadReviews();       loadUserReview();       setShowReviewForm(false);     } catch (error) {       console.error('Error submitting review:', error);     }   };    const likeReview = async (reviewId) => {     try {       const review = reviews.find(r => r.objectId === reviewId);       if (review) {         await trickleUpdateObject(`reviews:${contentId}`, reviewId, {           ...review.objectData,           likes: review.objectData.likes + 1         });         loadReviews();       }     } catch (error) {       console.error('Error liking review:', error);     }   };    const averageRating = reviews.length > 0      ? (reviews.reduce((sum, r) => sum + r.objectData.rating, 0) / reviews.length).toFixed(1)     : 0;    try {     return (       <div className="mt-8" data-name="user-reviews" data-file="components/UserReviews.js">         <div className="flex justify-between items-center mb-6">           <div>             <h3 className="text-xl font-bold">ביקורות משתמשים</h3>             <div className="flex items-center mt-2">               <div className="flex">                 {[1, 2, 3, 4, 5].map(star => (                   <div                      key={star}                     className={`icon-star ${star <= averageRating ? 'text-yellow-500' : 'text-gray-600'}`}                   ></div>                 ))}               </div>               <span className="ml-2 text-lg font-semibold">{averageRating}</span>               <span className="text-gray-400 mr-2">({reviews.length} ביקורות)</span>             </div>           </div>                      {user && (             <button                className="btn-primary"               onClick={() => setShowReviewForm(true)}             >               {userReview ? 'ערוך ביקורת' : 'כתוב ביקורת'}             </button>           )}         </div>          {reviews.length === 0 ? (           <div className="text-center py-8">             <p className="text-gray-400">אין ביקורות עדיין. היה הראשון לכתוב!</p>           </div>         ) : (           <div className="space-y-4">             {reviews.map(review => (               <div key={review.objectId} className="bg-gray-800 rounded-lg p-4">                 <div className="flex justify-between items-start mb-3">                   <div>                     <div className="font-semibold">{review.objectData.userName}</div>                     <div className="flex items-center">                       <div className="flex ml-2">                         {[1, 2, 3, 4, 5].map(star => (                           <div                              key={star}                             className={`icon-star text-sm ${star <= review.objectData.rating ? 'text-yellow-500' : 'text-gray-600'}`}                           ></div>                         ))}                       </div>                       <span className="text-sm text-gray-400">                         {new Date(review.createdAt).toLocaleDateString('he-IL')}                       </span>                     </div>                   </div>                 </div>                                  <p className="text-gray-300 mb-3">{review.objectData.review}</p>                                  <div className="flex items-center justify-between">                   <button                      className="flex items-center text-gray-400 hover:text-white text-sm"                     onClick={() => likeReview(review.objectId)}                   >                     <div className="icon-thumbs-up text-sm ml-1"></div>                     {review.objectData.likes}                   </button>                 </div>               </div>             ))}           </div>         )}          {showReviewForm && (           <ReviewForm              existingReview={userReview?.objectData}             onClose={() => setShowReviewForm(false)}             onSubmit={submitReview}           />         )}       </div>     );   } catch (error) {     console.error('UserReviews component error:', error);     return null;   } }  function ReviewForm({ existingReview, onClose, onSubmit }) {   const [rating, setRating] = React.useState(existingReview?.rating || 0);   const [reviewText, setReviewText] = React.useState(existingReview?.review || '');    const handleSubmit = (e) => {     e.preventDefault();     if (rating > 0 && reviewText.trim()) {       onSubmit(rating, reviewText.trim());     }   };    return (     <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">       <div className="bg-gray-900 rounded-lg p-6 max-w-md w-full mx-4">         <h3 className="text-xl font-bold mb-4">           {existingReview ? 'ערוך ביקורת' : 'כתוב ביקורת'}         </h3>                  <form onSubmit={handleSubmit}>           <div className="mb-4">             <label className="block text-sm font-medium mb-2">דירוג</label>             <div className="flex space-x-1">               {[1, 2, 3, 4, 5].map(star => (                 <button                   key={star}                   type="button"                   className={`text-2xl ${rating >= star ? 'text-yellow-500' : 'text-gray-600'}`}                   onClick={() => setRating(star)}                 >                   <div className="icon-star"></div>                 </button>               ))}             </div>           </div>                      <div className="mb-6">             <label className="block text-sm font-medium mb-2">הביקורת שלך</label>             <textarea               rows="4"               required               value={reviewText}               onChange={(e) => setReviewText(e.target.value)}               placeholder="שתף את דעתך על התוכן..."               className="w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded"             />           </div>                      <div className="flex space-x-3">             <button                type="submit"                disabled={rating === 0 || !reviewText.trim()}               className="btn-primary flex-1 disabled:opacity-50"             >               {existingReview ? 'עדכן' : 'פרסם'}             </button>             <button type="button" onClick={onClose} className="btn-secondary flex-1">               ביטול             </button>           </div>         </form>       </div>     </div>   ); }

export default UserReviews;
